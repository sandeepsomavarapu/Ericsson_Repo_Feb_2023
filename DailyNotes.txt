
DAY-1

Language :
==========
	English--->communication with humans
	
Programming Languages:
=======================
	communication with machines 


		
	Programming Languages
			POP 					OOP   oops
B,C,BCPl,Photon,CObol...		C++,python,java,.net....


				1)Performance		inheritance,polymorphisam
				2)Security			encapsulation,abstraction



Why JAVA?
		1995   jdk beta  
		
		2014	jdk 8/ 1.8
		
		jdk 19   James gosling  sun micro system --->Oracle 


https://www.javatpoint.com/javafx-how-to-install-java


1)Platform Independent

2)Garbage Collection   garbage collector 



 JAVA PI Language
 
		WORA
		
	Welcome.java  							.net(microsoft)



		
machine 1		machine2				machine1		machine 2
windows11 		linux					windows11		mac os
64					
i7



53 keywords ---lowercase 

welcome to java 

Welcome.java

class 

Identifiers:
===========
Any name in java 
classname ,variable,method namemobj name,interface name 


a-z
A-Z
0-9
$
_


variables
-----------
		sandeep trainer--994994949

syntax:

	datatype  varname=value;
	
	8 PDT
	
	byte	1 byte			-128 to 127
	short	2 bytes			-32768 to 32767
	int		4 bytes			-2147483648 to 2147483647
	long	8 bytes 		-2 power 64-1   			long	age=35;long contact=94949949444
	
	float	4 bytes				98.5434534535487
	double	8 bytes		

	boolean 1 bit  true(1)/false(0) 
	char 	2 bytes	'M' / 'F'
	
	
	2 types of variables
	
		local variable (inside a method)
		global variable (define outside method with in the class )

IDE-->eclipse,my eclipse,intellji,vscode,......
		Eclipse IDE for Enterprise Java and Web Developers

											Java
					JSE 						JEE 							 			JME				
			corejava,awt,swings,applets		SERVLETS,JSP,JSF,EJB,SPRING,webservices	...		ANDROID		

APPLICATIONS:
=============
1)STANDALONE / DESKTOP APPLICATIONS    ECLIPSE,VLc MEDIA PALYER,ANTI VIRUS...

2)WEB APPLICATIONS   				 GMAIL,FB,INSTA,AMAZON.....urls

3)DISTRIBUTED APPLICATIONS				banking ,atm,phonepe

4)MOBILE APPLICATIONS			



Instance and Static :
=====================

1)syntax
	static int countryCode=91;//static variable
			int empId=1231;		//instnace variable

2)Memory

		static variables will get memory space ONLY ONCE at the time  .class loading into JVM

		instance variables will get memory for EVERY OBJECT creation
		
			object creation-->memory creation
			
			classname objname=new classname();
			classname objname=new constructor();
		
3)Access
		static variable can be accessed by using CLASSNAME 	
		instance variable can be accessed by using OBJREF

4)context 
		unique data use instance
		common data use static 
		
Methods:
=========

m1{
10
}
					void,int -->return 123;

accessmodifier static/instance  returntype methodname(datatype varname,.....) //method signature
{
//method body

}

public static void main(String args[])
{
/...
////
...

}

flow control:
==============
	if
	
	else
	
	switch
	for
	
	while
	 dowhile
	 switch 
	 
	 
	 
Day-2:
==========

command line argumants 

java.util.Scanner 

arrays -->multiple values

		int a=123;
		int a1[]={12,23,23,33,44};
		int a2[]=new int[5];
			a2[0]=90;
			a2[1]=89;
		
		//index 0,1,2,3,4,
int a1[]={12,23,23,33,44};
		int a2[]=new int[5];
			a2[0]=90;
			a2[1]=89;
			a2[3]=78;
		
			System.out.println(a1[3]);
			System.out.println(a2[3]);
			
			
			
			
Package --->folder 

	pre defined   -->	java.lang ,java.util,java.time,........
	user defined  --> com.ericcson.basic


NOTE:
======

By default package for every java file is java.lang

 parent clasBy defaults for every java class is java.lang.Object


OOPS Features
=============

				1)Performance		inheritance,polymorphisam
				2)Security			encapsulation,abstraction



inheritance:
===========extends,implements

the process of aquiring features/properties from one class to another class

code reusability

class X  parent /super 
{

//100 methods /behaviours/actions
// 20 variables /properties/data


}

class Y extends X  sub /child
{
//20 methods
//10 variables

}

Multiple Inheritance:
=====================
many parents and one child 

Multiple Inheritance not supported by java @class level
Multiple Inheritance  supported by java @interface level



class Parent1                 class Parent2
{								{

 m1()								m1()
{									{
	a+b								a-b
}									}


}								}


class Child extends Parent1,Parent2
{

Child child=new Child();
	child.m1();//ambiguity
}

interface :
===========


	concrete/non-abstract/implemented method
	
		method with signature and body(implementation) 
	
	abstract method 

		method with signature and with out BODY(implementation)


		public abstract void printDate();

class		  :its a combination only concrete methods

abstract class:its a combination of both concrete and abstract methods 

interface 	  :its a combination of only abstract methods 


abstraction:
============
		hiding the implementation by showcasing functionalities
	
	abstact class 	0-100%
	
	interface      100%


polymorphisam:
==============

		method overloading/compile time /static binding 
		
		method overriding /runtime /dynamic binding


method overloading:
====================
method name is same signature is different 

					no of params
					order of params
					type of params 

		type promotion

method overriding:
====================
method name is same implementation is different


Day-3 :
========

final -->we can apply @ 3 places

	final before variable-->we can not change final variable value thorough out program
	final before method -->final methods can't be overriden
	final before class -->final classes can't be inherited 




Access Modifiers:- 
public		:every where we can access
private		:only inside class
protected	:inside the package every where outside the package when it is child
default		:only inside the package 

constructor
			1)classname objname=new constructor();
			
			used to intialize the object
			A a=new A();
			2)default values for instance variables
			
			
		2 types constructors
			
			1)default constructor
			2)parameterized constructor
			
			A
			
		public 	A()
			{
			
			
			}
		public 	A(String name)
			{
			
			
			}	

this
		this keyword used to represent CURRENT class properties(variable,method,object,constructor)
		
super
		super is used to represent PARENT class properties
		
Encapsulation:
==============
wrapping up of data and behaviours together 
			
			class
			{
			variables
			
			& 
			
			methods
			
			}
			
	
String,StringBuffer,StringBuilder:  java.lang
---------------------------------
	if we want to represent group chars will go s,sb,sbuilder

String literal

		String name="mahesh";//

String 	imuttable(fixed)
StringBuffer and StringBuilder (muttable)

String object will get memeory space inside the heap area seperate memory area called SCP(String constant pool)

Inside SCP duplicates are not allowed 




https://www.w3schools.com/java/java_ref_string.asp



StringBuffer methods are synchronized 
StringBuilder methods are not synchronized

													threads
												t1,t2,t3
public synchronized void m1()
{


}
public  void m2()
{


}

DAY 4:
===========



MCQ Link:
========
http://www.maamu.itgo.com/other/javaquiz1.htm


ExceptionHandling:
==================



1)system defined error messages 

2)abnormal termination


class Test
{
..
...2
...
...
.....
.

.
.
.








}

1)user friendly error messages
2)normal termination

Exception handling:
===================
mechanisam converting system defined error messages into user friendly error msgs

try
catch
finally
throw
throws







Assignment
=============

InvalidCredentialsException




Scanner -->username and password 

		ericcson & ericcson@123   ->welcome user
		
		throw InvalidCredentialsException-->enter valid credentials



I/O Streams:
=============

				file<---java app-->End user

				bytes
				objects
				character 


file I/O   stream 

Character stream(FileWriter,FileReader,BufferedReader,BufferedWriter,PrintWriter)

Byte stream(OutputStream,InputStream,FileOutputStream,FileInputStream)2 bytes

Data Stream(DataInput,DataOutput,DataInputStream,DataOutputStream)

Buffered Stream(Reader,Writer,BufferedInputStream,BufferedOutputStream)1024 bytes

Object Stream(ObjectInputStream,ObjectOutputStream) Serialization/de-serialization
	
	transient keyword.
	
	
	Serializable-->empty body--->marker interfaces
	Clonnable---->cloning
	RandomAccess -->zero abstract methods

	java.io.Ser
	
	Emp e=new Emp();//Serilizable
	
	//interface --> any no of methods
	
	//marker interface --> no methods 
	
	//functional interface -->only one abstract method
	
java app-->file

java.io

File -->

FileWriter -->write 

//the process of converting object data into byte data is called serialization
//the process of converting byte data into object data is called de-serialization	




take the username and password 

if username & password is avaiable in the file then login success /failure 


int a=123;

	a=a+1;
	
	a+=1

Collections:
============
	variables	
			int a=123;
	Arrays
			int a1[]={2,3,4,6,7,8};//index
			int a2[]=new int[5];
			

	1)	arrays are fixed in size 				AIOE
	2) homogeneous data only allowed 
	3)no utility methods
	
	collections framework
	
	1)collections are not fixed in size / growable in nature   ArrayList al=new ArrayList();//10,16 (cc*3/2)+1
	2)homogeneous ,heterogeneous data only allowed 
	3)100's utility methods

		java.util
							Collection
					List 				 Set

1)duplicates are allowed 				1)set will not allow duplicates
2)insetion order is preserved 			2)set will not follow insertion order



		AL,LL,V,S							HS,LHS,TS


** all the collection framework classes will allow both homogeneous and heterogeneous data except Treeset ,Treemap

Multi threading


java8 features 


case study



ArrayList:
==========

1)Al is recommended when ever our frequent operation selection

2)Al is not recommended when ever our frequent operation insertion or deletion in the middle


LinkedList:
===========
1)LinkedList is recommended when ever our frequent operation in  insertion or deletion in the middle.

2)LL is not recommended when ever our frequent operation selection


ArrayList(cc*3/2)+1 and Vector(10 double the size)

1)AL methods are not synchronized

2)Vector methods are synchronized


Stack:

		FILO,LIFO














